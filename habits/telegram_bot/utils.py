from typing import Union

from django.db.models import QuerySet, Q
from django.conf import settings
from django.contrib.auth.models import AbstractUser

from habits.models import Habit

def construct_periodic(minute: str, hour: str, day_of_month: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    """
    
    match minute, hour, day_of_month:
        case '*', '*', day_of_month:
            match day_of_month := int(day_of_month.split('/')[-1]):
                case 1:
                    return '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å'
                case 2 | 3 | 4:
                    return f'–ö–∞–∂–¥—ã–µ {day_of_month} –¥–Ω—è'
                case _:
                    return f'–ö–∞–∂–¥—ã–µ {day_of_month} –¥–Ω–µ–π'
        case '*', hour, '*':
            match hour := int(hour.split('/')[-1]):
                case 1:
                    return '–ö–∞–∂–¥—ã–π —á–∞—Å'
                case 2 | 3 | 4 | 22 | 23:
                    return f'–ö–∞–∂–¥—ã–µ {hour} —á–∞—Å–∞'
                case 21:
                    return f'–ö–∞–∂–¥—ã–π {hour} —á–∞—Å'
                case _:
                    return f'–ö–∞–∂–¥—ã–µ {hour} —á–∞—Å–æ–≤'
        case minute, '*', '*':
            match minute := int(minute.split('/')[-1]):
                case 1:
                    return '–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É'
                case 2 | 3 | 4 | 22 | 23 | 24 | 32 | 33 | 34 | 42 | 43 | 44 | 52 | 53 | 54:
                    return f'–ö–∞–∂–¥—ã–µ {minute} –º–∏–Ω—É—Ç—ã'
                case 21 | 31 | 41 | 51:
                    return f'–ö–∞–∂–¥—É—é {minute} –º–∏–Ω—É—Ç—É'
                case _:
                    return f'–ö–∞–∂–¥—ã–µ {minute} –º–∏–Ω—É—Ç'
 
               
async def get_list_habits(list_of_habits: QuerySet[Habit]) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç
    """    
    text = ''
    
    async for habit in list_of_habits:
        time = f"{habit.time_to_do.hour}" + ":" + (f"0{habit.time_to_do.minute}" if int(habit.time_to_do.minute) < 10 else habit.time_to_do.minute)
        title = f"üòå <b>–ü—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>" if habit.is_nice_habit else "üßê <b>–ü–æ–ª–µ–∑–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>"
        text += f'{title}\nüëâ –ß—Ç–æ –¥–µ–ª–∞–µ–º: {habit.action}\n‚è±Ô∏è –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è: {time}\n‚è≤Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {construct_periodic(habit.periodic.minute, habit.periodic.hour, habit.periodic.day_of_month)}\n\n'
    return text


async def get_next_habit(list_of_habits: QuerySet[Habit]) -> str:
    """–í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏–≤—ã—á–∫–∏
    """    
    local_time = settings.LOCAL_TIME_NOW
    
    next_habit : Habit = await list_of_habits.filter(Q(time_to_do__hour__gte=local_time.hour)).afirst()
    if next_habit:
        time = f"{next_habit.time_to_do.hour}" + ":" + (f"0{next_habit.time_to_do.minute}" if int(next_habit.time_to_do.minute) < 10 else next_habit.time_to_do.minute)
        title = f"üòå <b>–ü—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>" if next_habit.is_nice_habit else "üßê <b>–ü–æ–ª–µ–∑–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>"
        text = f'<b>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</b>\n{title}\nüëâ –ß—Ç–æ –¥–µ–ª–∞–µ–º: {next_habit.action}\n‚è±Ô∏è –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è: {time}\n‚è≤Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {construct_periodic(next_habit.periodic.minute, next_habit.periodic.hour, next_habit.periodic.day_of_month)}\n\n'
    else:
        text = '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≤—ã—á–µ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç'

    return text


async def get_info(user: AbstractUser) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """    
    text = f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º <b>{user.get_username()}</b>\n\
üìß –í–∞—à —ç–º–µ–∏–ª: {user.email}\n\
üì± –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n\
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {await user.habit_set.filter(is_nice_habit=False).acount()}\n\
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: {await user.habit_set.filter(is_nice_habit=True).acount()}'
    return text
